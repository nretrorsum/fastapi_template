version: '3.8'

services:
  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-8000}:${APP_PORT:-8000}"
    environment:
      # Application Settings
      - APP_HOST=0.0.0.0
      - APP_PORT=${APP_PORT:-8000}
      - DEBUG=${DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - API_V1_PREFIX=${API_V1_PREFIX:-/api/v1}
      - ENVIRONMENT=docker

      # Database Configuration
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meal_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}

      # Test Database Configuration
      - TEST_DB_HOST=test_db
      - TEST_DB_PORT=5432
      - TEST_DB_NAME=${TEST_DB_NAME:-meal_test_db}
      - TEST_DB_USER=${TEST_DB_USER:-postgres}
      - TEST_DB_PASSWORD=${TEST_DB_PASSWORD:-password}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Celery Configuration
      - CELERY_BROKER_HOST=redis
      - CELERY_BROKER_PORT=6379
      - CELERY_BROKER_DB=${CELERY_BROKER_DB:-0}
      - CELERY_RESULT_BACKEND_HOST=redis
      - CELERY_RESULT_BACKEND_PORT=6379
      - CELERY_RESULT_BACKEND_DB=${CELERY_RESULT_BACKEND_DB:-1}

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - meal_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-meal_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-meal_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - meal_network

  # Test PostgreSQL Database
  test_db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${TEST_DB_NAME:-meal_test_db}
      - POSTGRES_USER=${TEST_DB_USER:-postgres}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    ports:
      - "${TEST_DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER:-postgres} -d ${TEST_DB_NAME:-meal_test_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - meal_network
    profiles:
      - testing

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    command: >
      sh -c "
        if [ -n '${REDIS_PASSWORD:-}' ]; then
          redis-server --requirepass '${REDIS_PASSWORD}'
        else
          redis-server
        fi
      "
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - meal_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "src.meal.celery_app.celery_app", "worker", "--loglevel=info", "--concurrency=4", "--max-tasks-per-child=1000"]
    environment:
      # Database Configuration
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meal_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Celery Configuration
      - CELERY_BROKER_HOST=redis
      - CELERY_BROKER_PORT=6379
      - CELERY_BROKER_DB=${CELERY_BROKER_DB:-0}
      - CELERY_RESULT_BACKEND_HOST=redis
      - CELERY_RESULT_BACKEND_PORT=6379
      - CELERY_RESULT_BACKEND_DB=${CELERY_RESULT_BACKEND_DB:-1}

      - ENVIRONMENT=docker
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env:ro
      - celery_logs:/app/logs
    restart: unless-stopped
    networks:
      - meal_network
    deploy:
      replicas: 2

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "src.meal.celery_app.celery_app", "beat", "--loglevel=info", "--pidfile=/tmp/celerybeat.pid", "--schedule=/tmp/celerybeat-schedule"]
    environment:
      # Database Configuration
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-meal_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Celery Configuration
      - CELERY_BROKER_HOST=redis
      - CELERY_BROKER_PORT=6379
      - CELERY_BROKER_DB=${CELERY_BROKER_DB:-0}
      - CELERY_RESULT_BACKEND_HOST=redis
      - CELERY_RESULT_BACKEND_PORT=6379
      - CELERY_RESULT_BACKEND_DB=${CELERY_RESULT_BACKEND_DB:-1}

      - ENVIRONMENT=docker
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env:ro
      - celery_beat_data:/tmp
      - celery_logs:/app/logs
    restart: unless-stopped
    networks:
      - meal_network

  # Celery Flower Monitoring (Optional)
  celery_flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "src.meal.celery_app.celery_app", "flower", "--port=5555", "--broker=redis://redis:6379/0"]
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Celery Configuration
      - CELERY_BROKER_HOST=redis
      - CELERY_BROKER_PORT=6379
      - CELERY_BROKER_DB=${CELERY_BROKER_DB:-0}
      - CELERY_RESULT_BACKEND_HOST=redis
      - CELERY_RESULT_BACKEND_PORT=6379
      - CELERY_RESULT_BACKEND_DB=${CELERY_RESULT_BACKEND_DB:-1}

      - ENVIRONMENT=docker
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - meal_network
    profiles:
      - monitoring

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - meal_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  test_postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  celery_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  meal_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16